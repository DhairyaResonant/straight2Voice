//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class SuperAdminAllUsers{

    public class Meta {
        public Integer limit_Z {get;set;} // in json: limit
        public String next {get;set;} 
        public Integer offset {get;set;} 
        public String previous {get;set;} 
        public Integer total_count {get;set;} 

        public Meta(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'limit') {
                            limit_Z = parser.getIntegerValue();
                        } else if (text == 'next') {
                            next = parser.getText();
                        } else if (text == 'offset') {
                            offset = parser.getIntegerValue();
                        } else if (text == 'previous') {
                            previous = parser.getText();
                        } else if (text == 'total_count') {
                            total_count = parser.getIntegerValue();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Meta consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Objects {
        public String address {get;set;} 
        public String company {get;set;} 
        public Integer concurrent_call_limit {get;set;} 
        public String credit {get;set;} 
        public String email {get;set;} 
        public String first_name {get;set;} 
        public String last_credit_purchase_date {get;set;} 
        public String last_credit_usage_date {get;set;} 
        public String last_name {get;set;} 
        public Integer last_purchase {get;set;} 
        public Integer ll_sms {get;set;} 
        public Integer ll_vm {get;set;} 
        public Integer lll_sms {get;set;} 
        public Integer lll_vm {get;set;} 
        public Integer lm_sms {get;set;} 
        public Integer lm_voicemail {get;set;} 
        public String phone {get;set;} 
        public String resource_uri {get;set;} 
        public String scheduler_email_cdr_report {get;set;} 
        public Integer sms {get;set;} 
        public String sms_mask {get;set;} 
        public String status {get;set;} 
        public String sure_name {get;set;} 
        public String timezone {get;set;} 
        public Integer voicemail {get;set;} 
        public Boolean weekly_low_balance_notification {get;set;} 
        public Integer limit_size{get;set;} //added by dhairya
        public Integer offset{get;set;} // added by dhairya
        
        public Objects(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'address') {
                            address = parser.getText();
                        } else if (text == 'company') {
                            company = parser.getText();
                        } else if (text == 'concurrent_call_limit') {
                            concurrent_call_limit = parser.getIntegerValue();
                        } else if (text == 'credit') {
                            credit = parser.getText();
                        } else if (text == 'email') {
                            email = parser.getText();
                        } else if (text == 'first_name') {
                            first_name = parser.getText();
                        } else if (text == 'last_credit_purchase_date') {
                            last_credit_purchase_date = parser.getText();
                        } else if (text == 'last_credit_usage_date') {
                            last_credit_usage_date = parser.getText();
                        } else if (text == 'last_name') {
                            last_name = parser.getText();
                        } else if (text == 'last_purchase') {
                            last_purchase = parser.getIntegerValue();
                        } else if (text == 'll_sms') {
                            ll_sms = parser.getIntegerValue();
                        } else if (text == 'll_vm') {
                            ll_vm = parser.getIntegerValue();
                        } else if (text == 'lll_sms') {
                            lll_sms = parser.getIntegerValue();
                        } else if (text == 'lll_vm') {
                            lll_vm = parser.getIntegerValue();
                        } else if (text == 'lm_sms') {
                            lm_sms = parser.getIntegerValue();
                        } else if (text == 'lm_voicemail') {
                            lm_voicemail = parser.getIntegerValue();
                        } else if (text == 'phone') {
                            phone = parser.getText();
                        } else if (text == 'resource_uri') {
                            resource_uri = parser.getText();
                        } else if (text == 'scheduler_email_cdr_report') {
                            scheduler_email_cdr_report = parser.getText();
                        } else if (text == 'sms') {
                            sms = parser.getIntegerValue();
                        } else if (text == 'sms_mask') {
                            sms_mask = parser.getText();
                        } else if (text == 'status') {
                            status = parser.getText();
                        } else if (text == 'sure_name') {
                            sure_name = parser.getText();
                        } else if (text == 'timezone') {
                            timezone = parser.getText();
                        } else if (text == 'voicemail') {
                            voicemail = parser.getIntegerValue();
                        } else if (text == 'weekly_low_balance_notification') {
                            weekly_low_balance_notification = parser.getBooleanValue();
                        } else if (text == 'limit'){
                            limit_size = parser.getIntegerValue();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Objects consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public Meta meta {get;set;} 
    public List<Objects> objects {get;set;} 

    public SuperAdminAllUsers(JSONParser parser) {
        while (parser.nextToken() != System.JSONToken.END_OBJECT) {
            if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                String text = parser.getText();
                if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                    if (text == 'meta') {
                        meta = new Meta(parser);
                    } else if (text == 'objects') {
                        objects = arrayOfObjects(parser);
                    } else {
                        System.debug(LoggingLevel.WARN, 'SuperAdminAllUsers consuming unrecognized property: '+text);
                        consumeObject(parser);
                    }
                }
            }
        }
    }
    
    
    public static SuperAdminAllUsers parse(String json) {
        System.JSONParser parser = System.JSON.createParser(json);
        return new SuperAdminAllUsers(parser);
    }
    
    public static void consumeObject(System.JSONParser parser) {
        Integer depth = 0;
        do {
            System.JSONToken curr = parser.getCurrentToken();
            if (curr == System.JSONToken.START_OBJECT || 
                curr == System.JSONToken.START_ARRAY) {
                depth++;
            } else if (curr == System.JSONToken.END_OBJECT ||
                curr == System.JSONToken.END_ARRAY) {
                depth--;
            }
        } while (depth > 0 && parser.nextToken() != null);
    }
    
    private static List<Objects> arrayOfObjects(System.JSONParser p) {
        List<Objects> res = new List<Objects>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Objects(p));
        }
        return res;
    }




}